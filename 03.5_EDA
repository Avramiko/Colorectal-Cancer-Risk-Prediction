# File: 03.5_EDA.py
# Exploratory Data Analysis of the final analytical cohort.

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os

input_file = "final_analytical_cohort.csv"
output_dir = "eda_figures"
os.makedirs(output_dir, exist_ok=True)

data = pd.read_csv(input_file)

codes_to_replace = [-1, -3, -7]
data.replace(codes_to_replace, np.nan, inplace=True)
print(f"Dataset shape: {data.shape[0]} rows, {data.shape[1]} columns")

print("\nData Types and Non-Null Counts:")
data.info()

missing_pct = (data.isnull().sum() / len(data)) * 100
missing_summary = (
    pd.DataFrame({"column_name": data.columns, "missing_percentage": missing_pct})
    .query("missing_percentage > 0")
    .sort_values("missing_percentage", ascending=False)
)
if not missing_summary.empty:
    print("\nColumns with missing values (%):")
    print(missing_summary)

    plt.figure(figsize=(12, 8))
    sns.barplot(x="missing_percentage", y="column_name", data=missing_summary.head(20))
    plt.title("Top 20 Columns with Missing Values")
    plt.xlabel("Percentage Missing (%)")
    plt.ylabel("Column Name")
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, "missing_values_plot.png"))
    plt.close()
    print(f"Saved missing values plot to '{output_dir}/missing_values_plot.png'")

numeric_cols = data.select_dtypes(include=np.number).columns.tolist()
if numeric_cols:
    print("\nDescriptive statistics (numeric):")
    print(data[numeric_cols].describe().transpose())

key_numeric_cols = ["21022-0.0", "21001-0.0", "smoking_duration"]
for col in key_numeric_cols:
    if col in data.columns:
        plt.figure(figsize=(8, 5))
        sns.histplot(data[col].dropna(), kde=True)
        plt.title(f"Distribution of {col}")
        plt.xlabel(col)
        plt.ylabel("Frequency")
        plt.tight_layout()
        plt.savefig(os.path.join(output_dir, f"hist_{col}.png"))
        plt.close()
print(f"Saved histograms for key numerical variables to '{output_dir}'")

categorical_cols = [
    "sleep_disorder_status", "1170-0.0", "1180-0.0", "1190-0.0", "1200-0.0",
    "1210-0.0", "1220-0.0", "31-0.0", "20116-0.0", "1558-0.0",
    "22032-0.0", "3426-0.0", "1349-0.0", "1369-0.0", "2443-0.0",
    "6138-0.0", "738-0.0", "21000-0.0", "family_history_CRC",
    "had_bowel_procedure_before_baseline", "had_relevant_gi_illness_baseline",
    "has_IBD_baseline", "has_diabetes_baseline", "takes_chronic_meds_at_baseline",
]
categorical_cols = [c for c in categorical_cols if c in data.columns]

for col in categorical_cols:
    value_counts_df = pd.DataFrame(data[col].value_counts(dropna=False))
    value_counts_df.columns = ["count"]
    value_counts_df["percentage"] = (data[col].value_counts(normalize=True, dropna=False) * 100).round(2)
    print(f"\nValue counts for '{col}':")
    print(value_counts_df)

    plt.figure(figsize=(10, 6))
    sns.countplot(y=data[col], order=data[col].value_counts(dropna=False).index, orient="h")
    plt.title(f"Count of Categories in {col}")
    plt.xlabel("Count")
    plt.ylabel("Category Code")
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, f"countplot_{col}.png"))
    plt.close()

print(f"\nSaved count plots for categorical variables to '{output_dir}'")

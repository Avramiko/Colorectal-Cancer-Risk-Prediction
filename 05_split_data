# File: 05_split_data.py
import pandas as pd
from sklearn.model_selection import train_test_split
import os

input_file = "scenario_1_balanced_world/s1_balanced_source.csv"
output_dir = "scenario_1_balanced_world/splits"

TRAIN_SIZE = 0.70
VALIDATION_SIZE = 0.15
TEST_SIZE = 0.15
RANDOM_STATE = 42

data = pd.read_csv(input_file)

target = data["CRC_event"]
features = data.drop(columns=["CRC_event"])
print(f"Dataset: {features.shape[0]} samples, {features.shape[1]} features")

features_train, features_temp, target_train, target_temp = train_test_split(
    features,
    target,
    test_size=(VALIDATION_SIZE + TEST_SIZE),
    random_state=RANDOM_STATE,
    stratify=target,
)

validation_test_ratio = TEST_SIZE / (VALIDATION_SIZE + TEST_SIZE)
features_val, features_test, target_val, target_test = train_test_split(
    features_temp,
    target_temp,
    test_size=validation_test_ratio,
    random_state=RANDOM_STATE,
    stratify=target_temp,
)

print("\nSplit verification")
print(f"Train: {features_train.shape}")
print(f"Validation: {features_val.shape}")
print(f"Test: {features_test.shape}")
print("-" * 30)
print(f"CRC in train: {target_train.sum()} ({target_train.mean()*100:.2f}%)")
print(f"CRC in validation: {target_val.sum()} ({target_val.mean()*100:.2f}%)")
print(f"CRC in test: {target_test.sum()} ({target_test.mean()*100:.2f}%)")

train_set = pd.concat([features_train, target_train], axis=1)
validation_set = pd.concat([features_val, target_val], axis=1)
test_set = pd.concat([features_test, target_test], axis=1)

train_file = os.path.join(output_dir, "train_set.csv")
validation_file = os.path.join(output_dir, "validation_set.csv")
test_file = os.path.join(output_dir, "test_set.csv")

train_set.to_csv(train_file, index=False)
validation_set.to_csv(validation_file, index=False)
test_set.to_csv(test_file, index=False)

print("\nSaved files:")
print(f"Train -> '{train_file}'")
print(f"Validation -> '{validation_file}'")
print(f"Test -> '{test_file}'")
